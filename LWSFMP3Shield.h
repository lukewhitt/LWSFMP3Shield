/*******************************************************************************
 Sparkfun Electronics MP3 Shield Library
	based off library found at: http://billporter.info/?p=1270
	also used improvements found in Nathan Seidle's code: http://bit.ly/PIVjpm

	SparkFun DEV-09736 MP3 Shield (WITHOUT SD slot)
	Uses the VS1053 IC chip, may work with others, untested.

	Luke Whittington, 2012

	Debugging is done at 115200bps.
	The examples will use an embedded MP3 file (no SD card necessary)
	and streaming via WIFI shield.
	
	The flow of data is controlled by two pins:
	xDCS: Pull low to send data
	xCS: Pull low to send control commands
	
	From now on, xCS (aka *CS) will be called CS. The x just means it's active low
	which will be taken care of in firmware.
	
	We can also remove the need for DCS by setting SM_SDISHARE = 1. DCS signal is 
	internally generated by inverting CS input. However, if we want to hook up an external
	SD card, this is a bad idea. The reason is that if we combine the two pins (CS and DCS)
	then we always have to be in one of the modes (either data or control). This isn't a
	good idea since we need to get the VS1053 off the SPI bus so we can go grab data from
	the SD card.
	
	4 pins required to control the VS1053 IC:
	DREQ
	CS
	DCS
	Reset (optional, but always good to have reset)
	And the SPI bus.

	Available under WTFPL:

	DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
                    Version 2, December 2004

 Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>

 Everyone is permitted to copy and distribute verbatim or modified
 copies of this license document, and changing it is allowed as long
 as the name is changed.

            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION

  0. You just DO WHAT THE FUCK YOU WANT TO.

*******************************************************************************/

#ifndef LWSFMP3Shield_h
#define LWSFMP3Shield_h

//include SPI Library
#include <SPI.h>

// not necessary, but always better to be safe
#if ARDUINO > 22
#include <Arduino.h>
#else
#include <WProgram.h>
#endif

//Comment these out if you plan on using the SD Card slot.
//#include <SdFat.h>
//#include <SdFatUtil.h>

static void refill();

void Mp3WriteRegister(uint8_t, uint8_t, uint8_t);
uint16_t Mp3ReadRegister (uint8_t);

// Variables for the SdFat Library, again, uncomment if you're using SdFat (DEV-10628)
/*
static Sd2Card card;
static SdVolume volume;
static SdFile root;
static SdFile track;
*/
static uint8_t playing;

//buffer
static uint8_t mp3DataBuffer[32];

//Mp3 Player shield pin mapping. See the schematic. These are DIFFERENT for the DEV-09736 
// board. Compared to DEV-10628. Please check the schematic.
#define MP3_XCS 9 // Control chip Select pin (for accessing SPI Control/Status registers)
#define MP3_XDCS 2 // Data chip select / BSYNC pin
#define MP3_DREQ 3 // Data Request Pin: Player asks for more data
#define MP3_RESET 8 // Reset is active low
//#define SD_SEL 9 // select pin for SD Card

//VS10xx SCI Registers
#define SCI_MODE 0x00
#define SCI_STATUS 0x01
#define SCI_BASS 0x02
#define SCI_CLOCKF 0x03
#define SCI_DECODE_TIME 0x04
#define SCI_AUDATA 0x05
#define SCI_WRAM 0x06
#define SCI_WRAMADDR 0x07
#define SCI_HDAT0 0x08
#define SCI_HDAT1 0x09
#define SCI_AIADDR 0x0A
#define SCI_VOL 0x0B
#define SCI_AICTRL0 0x0C
#define SCI_AICTRL1 0x0D
#define SCI_AICTRL2 0x0E
#define SCI_AICTRL3 0x0F

//VS10xx SCI_MODE bitmasks
#define SM_RESET 0x04
#define SM_CANCEL 0x08

#define TRUE 1
#define FALSE 0

//tag location offsets
#define TRACK_TITLE = 3
#define TRACK_ARTIST = 33
#define TRACK_ALBUM = 63

class LWSFMP3Shield {
public:
uint8_t begin();
void SetVolume(uint8_t, uint8_t);
uint8_t playTrack(uint8_t);
uint8_t playMP3(char*);
void trackTitle(char*);
void trackArtist(char*);
void trackAlbum(char*);
void stopTrack();
uint8_t isPlaying();
bool skipTo(uint32_t);
uint32_t currentPosition();
void setBitRate(uint16_t);
void pauseDataStream();
void resumeDataStream();

private:
void getTrackInfo(uint8_t, char*);
uint8_t bitrate;
uint32_t start_of_music;
uint8_t VolL;
uint8_t VolR;
};

#endif